const https = require('https');

const API_KEY = "3a40c7e0-66b8-4686-81eb-6bdccdbc3797";

async function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.tweetscout.io',
      path: `/v2${path}`,
      method: 'GET',
      headers: {
        'ApiKey': API_KEY,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      timeout: 15000
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (error) => {
      resolve({ status: 'error', data: error.message });
    });

    req.on('timeout', () => {
      resolve({ status: 'timeout', data: 'Request timeout' });
    });

    req.end();
  });
}

async function analyzeSophireum() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó @sophireum');
  console.log('‚ïê'.repeat(80));
  
  const handle = 'sophireum';
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  console.log('üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
  const [info, topFollowers, score] = await Promise.all([
    makeRequest(`/info/${handle}`),
    makeRequest(`/top-followers/${handle}?from=db`),
    makeRequest(`/score/${handle}`)
  ]);
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('‚îÄ'.repeat(40));
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (info.status === 200 && !info.data.error) {
    const user = info.data;
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.screen_name}`);
    console.log(`üìù –ò–º—è: ${user.name}`);
    console.log(`üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.register_date}`);
    console.log(`üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–π: ${user.protected ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.verified ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${user.followers_count?.toLocaleString() || 'N/A'}`);
    console.log(`üë• –ü–æ–¥–ø–∏—Å–∫–∏: ${user.friends_count?.toLocaleString() || 'N/A'}`);
    console.log(`üìù –¢–≤–∏—Ç—ã: ${user.statuses_count?.toLocaleString() || 'N/A'}`);
    console.log(`üìà Engagement Rate: ${user.engagement_rate?.toFixed(2) || 'N/A'}%`);
    console.log(`‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: ${user.avg_likes?.toLocaleString() || 'N/A'}`);
    console.log(`üîÑ –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—Ç–≤–∏—Ç—ã: ${user.avg_retweets?.toLocaleString() || 'N/A'}`);
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', info.status, info.data);
  }
  
  // TweetScout Score
  if (score.status === 200 && !score.data.error) {
    console.log(`\nüèÜ TweetScout Score: ${score.data.score?.toFixed(2) || 'N/A'}`);
  } else {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TweetScout Score:', score.status, score.data);
  }
  
  // –¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
  if (topFollowers.status === 200 && Array.isArray(topFollowers.data)) {
    console.log(`\nüëë –¢–û–ü 20 –ü–û–î–ü–ò–°–ß–ò–ö–û–í (–ø–æ TweetScout Score):`);
    console.log('‚îÄ'.repeat(60));
    
    topFollowers.data.forEach((follower, index) => {
      console.log(`${(index + 1).toString().padStart(2)}. @${follower.screeName} (Score: ${follower.score?.toFixed(1) || 'N/A'}, Followers: ${follower.followersCount?.toLocaleString() || 'N/A'})`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const validScores = topFollowers.data.filter(f => f.score && !isNaN(f.score));
    const validFollowers = topFollowers.data.filter(f => f.followersCount && !isNaN(f.followersCount));
    
    if (validScores.length > 0) {
      const avgScore = validScores.reduce((sum, f) => sum + f.score, 0) / validScores.length;
      const maxScore = Math.max(...validScores.map(f => f.score));
      const minScore = Math.min(...validScores.map(f => f.score));
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ü –ü–û–î–ü–ò–°–ß–ò–ö–û–í:`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π Score: ${avgScore.toFixed(1)}`);
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Score: ${maxScore.toFixed(1)}`);
      console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Score: ${minScore.toFixed(1)}`);
    }
    
    if (validFollowers.length > 0) {
      const avgFollowers = validFollowers.reduce((sum, f) => sum + f.followersCount, 0) / validFollowers.length;
      const totalFollowers = validFollowers.reduce((sum, f) => sum + f.followersCount, 0);
      
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${avgFollowers.toLocaleString()}`);
      console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${totalFollowers.toLocaleString()}`);
    }
    
  } else {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', topFollowers.status, topFollowers.data);
  }
  
  // –†–∞—Å—á–µ—Ç REP Score
  console.log('\nüßÆ –†–ê–°–ß–ï–¢ REP SCORE:');
  console.log('‚îÄ'.repeat(40));
  
  if (info.status === 200 && topFollowers.status === 200 && score.status === 200) {
    const user = info.data;
    const followers = user.followers_count || 1;
    const topCount = Math.min(topFollowers.data.length, 5);
    const ageInYears = (Date.now() - Date.parse(user.register_date)) / (3.154e10);
    const engagementRate = user.engagement_rate || 0;
    const avgSmartScore = score.data.score || 0;
    
    const repScore = Math.round(
      0.35 * Math.log10(Math.max(followers, 1)) * 100 +
      0.25 * (topCount / Math.max(followers, 1)) * 1000 +
      0.15 * Math.sqrt(ageInYears) * 10 +
      0.15 * engagementRate +
      0.10 * (avgSmartScore / 10)
    );
    
    console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers.toLocaleString()}`);
    console.log(`üëë –¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${topCount}`);
    console.log(`üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: ${ageInYears.toFixed(1)} –ª–µ—Ç`);
    console.log(`üìà Engagement Rate: ${engagementRate.toFixed(2)}%`);
    console.log(`üèÜ –°—Ä–µ–¥–Ω–∏–π Smart Score: ${avgSmartScore.toFixed(1)}`);
    console.log(`\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô REP SCORE: ${repScore}`);
    
  } else {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ REP Score');
  }
  
  console.log('\n' + '‚ïê'.repeat(80));
}

analyzeSophireum().catch(console.error); 