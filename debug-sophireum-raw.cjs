const https = require('https');

const BASE = "https://api.tweetscout.io/v2";
const HEAD = { "ApiKey": "3a40c7e0-66b8-4686-81eb-6bdccdbc3797" };

async function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.tweetscout.io',
      path: `/v2${path}`,
      method: 'GET',
      headers: {
        'ApiKey': HEAD.ApiKey,
        'Content-Type': 'application/json',
      },
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          reject(new Error(`Invalid JSON: ${data}`));
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

const tsUser = (h) => makeRequest(`/info/${h}`);
const tsSmart = (h) => makeRequest(`/smart_followers/${h}?page=1`);
const tsMeta = (h) => makeRequest(`/smart_followers/${h}/meta`);

async function debugSophireum() {
  const handle = 'sophireum';
  
  console.log('üîç –û–¢–õ–ê–î–ö–ê –°–´–†–´–• –î–ê–ù–ù–´–• @sophireum');
  console.log('‚ïê'.repeat(80));

  try {
    console.log('\nüìä tsUser() - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
    console.log('‚îÄ'.repeat(50));
    const user = await tsUser(handle);
    console.log(JSON.stringify(user, null, 2));

    console.log('\nüìä tsSmart() - –£–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:');
    console.log('‚îÄ'.repeat(50));
    const smart = await tsSmart(handle);
    console.log(JSON.stringify(smart, null, 2));

    console.log('\nüìä tsMeta() - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:');
    console.log('‚îÄ'.repeat(50));
    const meta = await tsMeta(handle);
    console.log(JSON.stringify(meta, null, 2));

    console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    console.log('‚îÄ'.repeat(50));
    
    // –ê–Ω–∞–ª–∏–∑ user
    console.log('üìù User —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log(`  - followers_count: ${user.followers_count} (—Ç–∏–ø: ${typeof user.followers_count})`);
    console.log(`  - tweets_count: ${user.tweets_count} (—Ç–∏–ø: ${typeof user.tweets_count})`);
    console.log(`  - friends_count: ${user.friends_count} (—Ç–∏–ø: ${typeof user.friends_count})`);
    console.log(`  - verified: ${user.verified} (—Ç–∏–ø: ${typeof user.verified})`);
    console.log(`  - register_date: ${user.register_date} (—Ç–∏–ø: ${typeof user.register_date})`);
    
    // –ê–Ω–∞–ª–∏–∑ smart
    console.log('\nüë• Smart —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log(`  - smart_followers: ${Array.isArray(smart.smart_followers) ? smart.smart_followers.length : '–Ω–µ –º–∞—Å—Å–∏–≤'}`);
    if (Array.isArray(smart.smart_followers)) {
      console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${smart.smart_followers.length}`);
      if (smart.smart_followers.length > 0) {
        console.log(`  - –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:`, smart.smart_followers[0]);
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ meta
    console.log('\nüìà Meta —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log(`  - median_followers: ${meta.median_followers} (—Ç–∏–ø: ${typeof meta.median_followers})`);
    console.log(`  - avg_smart_score: ${meta.avg_smart_score} (—Ç–∏–ø: ${typeof meta.avg_smart_score})`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

debugSophireum().catch(console.error); 