const https = require('https');

class TweetScoutAPI {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'api.tweetscout.io';
  }

  async makeRequest(path) {
    return new Promise((resolve, reject) => {
      const options = {
        hostname: this.baseUrl,
        path: `/v2${path}`,
        method: 'GET',
        headers: {
          'ApiKey': this.apiKey,
          'Content-Type': 'application/json',
        },
      };

      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          try {
            resolve(JSON.parse(data));
          } catch (e) {
            reject(new Error(`Invalid JSON: ${data}`));
          }
        });
      });

      req.on('error', reject);
      req.end();
    });
  }

  async getUser(handle) {
    console.log(`üîç TweetScout: Fetching info for @${handle}...`);
    return this.makeRequest(`/info/${handle}`);
  }

  async getSmartFollowers(handle) {
    console.log(`üîç TweetScout: Fetching smart followers for @${handle}...`);
    return this.makeRequest(`/smart_followers/${handle}?page=1`);
  }

  async getSmartMeta(handle) {
    console.log(`üîç TweetScout: Fetching smart meta for @${handle}...`);
    return this.makeRequest(`/smart_followers/${handle}/meta`);
  }

  async getUserScore(handle) {
    console.log(`üîç TweetScout: Fetching score for @${handle}...`);
    return this.makeRequest(`/score/${handle}`);
  }
}

function computeReputation(user, smartFollowers, meta, score) {
  const followers = user.followers_count || 0;
  const smartTop = (smartFollowers.smart_followers || []).slice(0, 5)
                   .map(s => `@${s.screen_name}`);
  const smartCount = smartTop.length;
  
  // –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≥–æ–¥–∞—Ö
  const createdDate = new Date(user.register_date);
  const now = new Date();
  const ageYears = (now - createdDate) / (1000 * 60 * 60 * 24 * 365);

  const repScore = Math.round(
    0.35 * Math.log10(Math.max(followers, 1)) * 100 +
    0.25 * (smartCount / Math.max(followers, 1)) * 1000 +
    0.15 * Math.sqrt(ageYears) * 10 +
    0.15 * (score?.score || 0) +
    0.10 * ((meta?.avg_smart_score || 0) / 10)
  );

  return {
    rep: repScore,
    followers: followers,
    smartTop,
    smartMedianFollowers: meta?.median_followers || 0,
    smartAvgScore: meta?.avg_smart_score || 0,
    accountAge: ageYears.toFixed(1),
    verified: user.verified,
    tweetsCount: user.tweets_count,
    source: "tweetscout"
  };
}

function analyzeAccountType(followers, verified, ageYears) {
  if (followers >= 100000) return "Celebrity";
  if (followers >= 10000) return "Influencer";
  if (followers >= 1000) return "Regular";
  return "Newcomer";
}

function analyzeEngagementLevel(tweetsCount, followers, ageYears) {
  const tweetsPerYear = tweetsCount / ageYears;
  const tweetsPerFollower = followers > 0 ? tweetsCount / followers : 0;
  
  if (tweetsPerYear > 10000) return "Ultra Active";
  if (tweetsPerYear > 5000) return "Very Active";
  if (tweetsPerYear > 1000) return "Active";
  if (tweetsPerYear > 100) return "Moderate";
  return "Low Activity";
}

function getSmartFollowersAnalysis(smartFollowers) {
  const followers = smartFollowers.smart_followers || [];
  const verifiedCount = followers.filter(f => f.verified).length;
  const totalCount = followers.length;
  const verifiedRatio = totalCount > 0 ? verifiedCount / totalCount : 0;
  
  return {
    total: totalCount,
    verified: verifiedCount,
    verifiedRatio: verifiedRatio.toFixed(2),
    quality: verifiedRatio > 0.3 ? "High" : verifiedRatio > 0.1 ? "Medium" : "Low"
  };
}

function generateInsights(user, reputation, smartAnalysis, score) {
  const insights = [];
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  if (user.followers_count >= 100000) {
    insights.push("üéØ –ú–∞—Å—Å–æ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤");
  } else if (user.followers_count >= 10000) {
    insights.push("üìà –†–∞—Å—Ç—É—â–µ–µ –≤–ª–∏—è–Ω–∏–µ - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è");
  }
  
  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const tweetsPerYear = user.tweets_count / parseFloat(reputation.accountAge);
  if (tweetsPerYear > 10000) {
    insights.push("üî• –£–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω—ã–π - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
  } else if (tweetsPerYear > 5000) {
    insights.push("‚ö° –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
  } else if (tweetsPerYear < 100) {
    insights.push("üìù –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Ä–µ–¥–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
  }
  
  // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (user.verified) {
    insights.push("‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å");
  }
  
  // –ê–Ω–∞–ª–∏–∑ TweetScout Score
  if (score?.score > 2000) {
    insights.push("üèÜ Elite TweetScout Score - –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ");
  } else if (score?.score > 1000) {
    insights.push("‚≠ê High TweetScout Score - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ");
  }
  
  // –ê–Ω–∞–ª–∏–∑ —É–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  if (smartAnalysis.quality === "High") {
    insights.push("üëë –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –º–Ω–æ–≥–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
  }
  
  // –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞
  if (parseFloat(reputation.accountAge) > 5) {
    insights.push("üï∞Ô∏è –í–µ—Ç–µ—Ä–∞–Ω Twitter - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ");
  }
  
  return insights;
}

async function enhancedAnalysis() {
  const handles = ['zeroxcholy', '0xwenmoon', '0xmert_'];
  const apiKey = '3a40c7e0-66b8-4686-81eb-6bdccdbc3797';
  
  console.log('üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó TWITTER –ê–ö–ö–ê–£–ù–¢–û–í');
  console.log('='.repeat(80));
  console.log('üìä TweetScout API v2 + –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞');
  console.log('='.repeat(80));

  const tweetscout = new TweetScoutAPI(apiKey);
  const results = [];

  for (const handle of handles) {
    try {
      console.log(`\nüìä –ê–ù–ê–õ–ò–ó @${handle}`);
      console.log('‚ïê'.repeat(60));

      const [user, smartFollowers, meta, score] = await Promise.all([
        tweetscout.getUser(handle),
        tweetscout.getSmartFollowers(handle),
        tweetscout.getSmartMeta(handle),
        tweetscout.getUserScore(handle)
      ]);

      if (user.error || smartFollowers.error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @${handle}: TweetScout –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        continue;
      }

      const reputation = computeReputation(user, smartFollowers, meta, score);
      const accountType = analyzeAccountType(user.followers_count, user.verified, parseFloat(reputation.accountAge));
      const engagementLevel = analyzeEngagementLevel(user.tweets_count, user.followers_count, parseFloat(reputation.accountAge));
      const smartAnalysis = getSmartFollowersAnalysis(smartFollowers);
      const insights = generateInsights(user, reputation, smartAnalysis, score);

      console.log(`üèÜ REP Score: ${reputation.rep}`);
      console.log(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${reputation.followers?.toLocaleString()}`);
      console.log(`üê¶ –¢–≤–∏—Ç—ã: ${reputation.tweetsCount?.toLocaleString()}`);
      console.log(`üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: ${reputation.accountAge} –ª–µ—Ç`);
      console.log(`‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${reputation.verified ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`üè∑Ô∏è –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountType}`);
      console.log(`‚ö° –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${engagementLevel}`);
      
      console.log(`\nüìä –£–ú–ù–´–ï –ü–û–î–ü–ò–°–ß–ò–ö–ò:`);
      console.log(`   –í—Å–µ–≥–æ: ${smartAnalysis.total}`);
      console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${smartAnalysis.verified}`);
      console.log(`   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${smartAnalysis.verifiedRatio}`);
      console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${smartAnalysis.quality}`);
      
      if (reputation.smartTop.length > 0) {
        console.log(`   –¢–æ–ø-5: ${reputation.smartTop.join(', ')}`);
      }
      
      console.log(`\nüìà –ú–ï–¢–†–ò–ö–ò:`);
      console.log(`   Smart Median: ${reputation.smartMedianFollowers?.toLocaleString()}`);
      console.log(`   Smart Avg Score: ${reputation.smartAvgScore?.toFixed(2)}`);
      console.log(`   TweetScout Score: ${score?.score?.toFixed(2) || 'N/A'}`);
      
      console.log(`\nüí° –ò–ù–°–ê–ô–¢–´:`);
      insights.forEach(insight => console.log(`   ‚Ä¢ ${insight}`));

      results.push({ 
        handle, 
        reputation, 
        accountType, 
        engagementLevel, 
        smartAnalysis, 
        insights,
        score 
      });

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @${handle}:`, error.message);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ REP
  results.sort((a, b) => b.reputation.rep - a.reputation.rep);

  console.log('\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ô–¢–ò–ù–ì');
  console.log('‚ïê'.repeat(80));
  results.forEach((result, index) => {
    console.log(`${index + 1}. @${result.handle}`);
    console.log(`   REP: ${result.reputation.rep} | Followers: ${result.reputation.followers?.toLocaleString()}`);
    console.log(`   Type: ${result.accountType} | Activity: ${result.engagementLevel}`);
    console.log(`   TweetScout: ${result.score?.score?.toFixed(2) || 'N/A'}`);
    console.log('');
  });

  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('‚ïê'.repeat(80));
  const avgRep = results.reduce((sum, r) => sum + r.reputation.rep, 0) / results.length;
  const avgFollowers = results.reduce((sum, r) => sum + (r.reputation.followers || 0), 0) / results.length;
  const avgTweetScout = results.reduce((sum, r) => sum + (r.score?.score || 0), 0) / results.length;
  
  console.log(`–°—Ä–µ–¥–Ω–∏–π REP: ${Math.round(avgRep)}`);
  console.log(`–°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: ${Math.round(avgFollowers).toLocaleString()}`);
  console.log(`–°—Ä–µ–¥–Ω–∏–π TweetScout Score: ${avgTweetScout.toFixed(2)}`);
  console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π REP: ${Math.max(...results.map(r => r.reputation.rep))}`);
  console.log(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π REP: ${Math.min(...results.map(r => r.reputation.rep))}`);
  
  console.log('\nüè∑Ô∏è –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:');
  const typeCount = {};
  results.forEach(r => {
    typeCount[r.accountType] = (typeCount[r.accountType] || 0) + 1;
  });
  Object.entries(typeCount).forEach(([type, count]) => {
    console.log(`   ${type}: ${count}`);
  });
  
  console.log('\n‚ö° –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò:');
  const activityCount = {};
  results.forEach(r => {
    activityCount[r.engagementLevel] = (activityCount[r.engagementLevel] || 0) + 1;
  });
  Object.entries(activityCount).forEach(([activity, count]) => {
    console.log(`   ${activity}: ${count}`);
  });
}

enhancedAnalysis().catch(console.error); 